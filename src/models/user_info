use serde::{Deserialize, Serialize};
use diesel::prelude::Queryable;
use crate::config::database::establish_connection;

#[derive(Debug,Deserialize,Serialize,Queryable)]
#[serde(create = "rocket::serde")]
pub struct UserInfo {
    pub id: i32,
    pub username: String,
    pub header_url: String,
    pub ch3: i32,
    pub ch4: i32,
    pub ch5: i32,
    pub ch6: i32,
    pub ch8: i32,
}

impl UserInfo {
    pub fn page(offset: i32,limit: i32) -> Result<Vec<UserInfo>, diesel::result::Error> {
        use create::schema::user_info::dsl::*;

        let results = user_info
        .limit(limit.into())
        .offset(offset.into())
        .load::<UserInfo>(&conn)?;

        Ok(results)
    }

    pub fn new() -> UserInfo {
        UserInfo {
            username: "",
            header_url: "",
            ch3: 0,
            ch4: 0,
            ch5: 0,
            ch6: 0,
            ch8: 0,
        }
    } 

    pub fn insert(userInfo: UserInfo) -> Result<(),diesel::result::Error> {
        use create::schema::user_info::dsl::*;

        
    }
}

pub mod UserInfo;